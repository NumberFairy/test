package com.wisdombud.alumni.manage.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.criterion.Order;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.wisdombud.alumni.common.BaseSrvImpl;
import com.wisdombud.alumni.common.DicCommonSrv;
import com.wisdombud.alumni.dao.manage.BaseAlumniClubDao;
import com.wisdombud.alumni.dao.manage.BaseAlumniLiaisonDao;
import com.wisdombud.alumni.dao.manage.BaseBranchRelationDao;
import com.wisdombud.alumni.enums.AlumniBranchIdentityEnum;
import com.wisdombud.alumni.manage.BaseAlumniBranchStaffSrv;
import com.wisdombud.alumni.manage.BaseAlumniClubSrv;
import com.wisdombud.alumni.manage.BaseBranchRelationSrv;
import com.wisdombud.alumni.pojo.base.DicAlumniBranchType;
import com.wisdombud.alumni.pojo.manage.BaseAlumniBranch;
import com.wisdombud.alumni.pojo.manage.BaseAlumniBranchStaff;
import com.wisdombud.alumni.pojo.manage.BaseBranchRelation;
import com.wisdombud.alumni.vo.AlumniBranchVo;
import com.wisdombud.alumni.vo.Param;
import common.toolkit.java.entity.PageEntity;
import common.toolkit.java.orm.hibernate.CommonDao;

	/**
     * 校友分会表Srv. <br/>
     * @author zxguan
     */
@Service(value= "baseAlumniClubSrv")
public class BaseAlumniClubSrvImpl extends BaseSrvImpl<BaseAlumniBranch> implements BaseAlumniClubSrv {

    private static final Logger LOGGER = Logger.getLogger(BaseAlumniClubSrvImpl.class);

	@Autowired
	private DicCommonSrv dicSrv;
	@Autowired
	private BaseBranchRelationSrv memberSrv;
	@Autowired
	private BaseAlumniBranchStaffSrv staffSrv;
	@Autowired
	private BaseAlumniClubDao dao;
	@Autowired
	private BaseAlumniLiaisonDao liaisonDao;
	@Autowired
	private BaseBranchRelationDao memberDao;

    public BaseAlumniClubSrvImpl(){}

	@Autowired
	public BaseAlumniClubSrvImpl(@Qualifier(value = "baseAlumniClubDao") CommonDao<BaseAlumniBranch, String> commonDao) {
		super(commonDao);
	}

	@Override
	public String fillTypeStr(String type) {
		String typeStr = null;
		if (StringUtils.isNotBlank(type)) {
			List<DicAlumniBranchType> lists = dicSrv.findAll(DicAlumniBranchType.class);
			for (DicAlumniBranchType item : lists) {
				if ((item.id).equals(type)) {
					typeStr = item.getValue();
					break;
				}
			}
		}
		return typeStr;
	}

	@Override
	public void pageVo(PageEntity<AlumniBranchVo> pageBranchVo, Map<String, Param> params, List<Order> orders) {
		PageEntity<BaseAlumniBranch> pageEntity = new PageEntity<>(pageBranchVo.getStart(), pageBranchVo.getPageSize());
		super.page(pageEntity, params, orders);
		this.fillVo(pageBranchVo, pageEntity);
	}

	private void fillVo(PageEntity<AlumniBranchVo> pageVo, PageEntity<BaseAlumniBranch> pageEntity) {
		List<BaseAlumniBranch> branchList = pageEntity.getResults();
		List<AlumniBranchVo> voList = Lists.newArrayList();
		for (BaseAlumniBranch branch : branchList) {
			AlumniBranchVo vo = new AlumniBranchVo();
			vo.setId(branch.getId());
			vo.setName(branch.getName());
			vo.setWechat(branch.getWechatId());
			vo.setEmail(branch.getEmail());
			vo.setAddress(branch.getAddress());
			this.fillStaff(vo, branch.getStaffList());
			vo.setMemberNum(branch.getMemberList().size());
			voList.add(vo);
		}
		pageVo.setResults(voList);
		pageVo.setCurrentPage(pageEntity.getCurrentPage());
		pageVo.setCurrentPageLength(pageEntity.getCurrentPageLength());
		pageVo.setPageSize(pageEntity.getPageSize());
		pageVo.setStart(pageEntity.getStart());
		pageVo.setTotalPages(pageEntity.getTotalPages());
		pageVo.setTotalResults(pageEntity.getTotalResults());
	}

	private void fillStaff(AlumniBranchVo vo, List<BaseAlumniBranchStaff> staffList) {
		for (BaseAlumniBranchStaff staff : staffList) {
			if (String.valueOf(AlumniBranchIdentityEnum.HUIZHANG.getValue()).equals(staff.getStaff())) {
				vo.setHuizhang(staff.getName());
				break;
			}
		}
	}

	@Override
	public void findMemberByBranch(PageEntity<BaseBranchRelation> pageMenber, Map<String, Param> params) {
		memberDao.pageByHql(pageMenber, params, new ArrayList<Order>());
	}

//	@Override
//	public void deleteDicById(String branchId, String type) {
//		dao.deleteDicById(branchId, type);
//	}

//	@Override
//	public void addOrUpdate(BaseAlumniBranch entity, List<BaseAlumniBranchStaff> list, String type, String branchId) {
//		if (null != entity && StringUtils.isBlank(entity.id)) {
//			this.save(entity);
//			branchId = this.saveDic(entity, type);
//			entity.setCreateTime(new Date());
//		} else {
//			entity.setLastUpdate(new Date());
//			BaseAlumniBranch oldEntity = this.find(entity.id);
//			BeanUtils.copyProperties(entity, oldEntity, "id", "createTime");
//			this.update(oldEntity);
//		}
//		staffSrv.deleteBy("branchId", branchId);
//		for (BaseAlumniBranchStaff inst : list) {
//			inst.setBranchId(branchId);
//			staffSrv.save(inst);
//		}
// 	}

//	private String saveDic(BaseAlumniBranch entity, String type) {
//		String branchId = null;
//		if (type.equals(AlumniBranchTypeEnum.CHAPTER.getKey() + "")) {
//			DicChapterBranch po = new DicChapterBranch();
//			po.setValue(entity.getName());
//			po.setInfoId(entity.getId());
//			chapterSrv.save(po);
//			branchId = po.getId();
//
//		} else if (type.equals(AlumniBranchTypeEnum.COLLEGE.getKey())) {
//			DicCollegeBranch po = new DicCollegeBranch();
//			po.setValue(entity.getName());
//			po.setInfoId(entity.getId());
//			collegeSrv.save(po);
//			branchId = po.getId();
//
//		} else if (type.equals(AlumniBranchTypeEnum.OVERSEA.getKey())) {
//			DicOverseaBranch po = new DicOverseaBranch();
//			po.setValue(entity.getName());
//			po.setInfoId(entity.getId());
//			overSeaSrv.save(po);
//			branchId = po.getId();
//
//		} else if (type.equals(AlumniBranchTypeEnum.INDUSTRY.getKey())) {
//			DicIndustryBranch po = new DicIndustryBranch();
//			po.setValue(entity.getName());
//			po.setInfoId(entity.getId());
//			industrySrv.save(po);
//			branchId = po.getId();
//
//		} else {
//		}
//		return branchId;
//	}

//	@Override
//	public void deleteAllById(String id, String branchId) {
//		srv.deleteById(this.id);
//		srv.deleteDicById(branchId, type);
//		staffSrv.deleteBy("branchId", branchId);
//		memberSrv.deleteBy("branchId", branchId);}

}