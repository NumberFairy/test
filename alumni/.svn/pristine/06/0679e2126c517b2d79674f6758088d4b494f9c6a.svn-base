package com.wisdombud.alumni.manage.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.TypedQuery;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.criterion.Order;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.wisdombud.alumni.common.BaseSrvImpl;
import com.wisdombud.alumni.common.DicCommonSrv;
import com.wisdombud.alumni.dao.manage.BaseAlumniClubDao;
import com.wisdombud.alumni.dao.manage.BaseAlumniLiaisonDao;
import com.wisdombud.alumni.dao.manage.BaseBranchRelationDao;
import com.wisdombud.alumni.manage.BaseAlumniClubSrv;
import com.wisdombud.alumni.manage.BaseBranchRelationSrv;
import com.wisdombud.alumni.pojo.base.DicAlumniBranchType;
import com.wisdombud.alumni.pojo.manage.BaseAlumniBranch;
import com.wisdombud.alumni.pojo.manage.BaseAlumniLiaison;
import com.wisdombud.alumni.pojo.manage.BaseBranchRelation;
import com.wisdombud.alumni.vo.AlumniBranchVo;
import com.wisdombud.alumni.vo.Param;

import common.toolkit.java.entity.PageEntity;
import common.toolkit.java.orm.hibernate.CommonDao;

	/**
     * 校友分会表Srv. <br/>
     * @author zxguan
     */
@Service(value= "baseAlumniClubSrv")
public class BaseAlumniClubSrvImpl extends BaseSrvImpl<BaseAlumniBranch> implements BaseAlumniClubSrv {

    private static final Logger LOGGER = Logger.getLogger(BaseAlumniClubSrvImpl.class);

	@Autowired
	private DicCommonSrv dicSrv;
	@Autowired
	private BaseBranchRelationSrv memberSrv;
	@Autowired
	private BaseAlumniClubDao dao;
	@Autowired
	private BaseAlumniLiaisonDao liaisonDao;
	@Autowired
	private BaseBranchRelationDao memberDao;

    public BaseAlumniClubSrvImpl(){}

	@Autowired
	public BaseAlumniClubSrvImpl(@Qualifier(value = "baseAlumniClubDao") CommonDao<BaseAlumniBranch, String> commonDao) {
		super(commonDao);
	}

	@Override
	public String fillAlumniBranchTypeStr(String type) {
		String typeStr = null;
		if (StringUtils.isNotBlank(type)) {
			List<DicAlumniBranchType> lists = dicSrv.findAll(DicAlumniBranchType.class);
			for (DicAlumniBranchType item : lists) {
				if ((item.id).equals(type)) {
					typeStr = item.getValue();
					break;
				}
			}
		}
		return typeStr;
	}

	@Override
	public void page(PageEntity<BaseAlumniBranch> pageEntity, PageEntity<AlumniBranchVo> pageBranch, Map<String, Param> params) {
		List<AlumniBranchVo> branchVoList = Lists.newArrayList();
		dao.pageByHql(pageEntity, params, buildOrder());
		List<BaseAlumniBranch> branchList = pageEntity.getResults();
		for (BaseAlumniBranch branch : branchList) {
			AlumniBranchVo vo = new AlumniBranchVo();
			String liaisonStr = getLiaisonStr(branch.getLiaisons());
			List<BaseBranchRelation> menberList = memberDao.findBy("branchId", branch.getId());
			vo.setId(branch.getId());
			vo.setName(branch.getName());
			vo.setHuizhang(branch.getHuizhang());
			vo.setLiaison(liaisonStr);
			vo.setMemberNum(menberList.size());
			vo.setWechat(branch.getWechatId());
			vo.setEmail(branch.getEmail());
			vo.setAddress(branch.getAddress());
			branchVoList.add(vo);
		}
		pageBranch.setResults(branchVoList);
		pageBranch.setCurrentPage(pageEntity.getCurrentPage());
		pageBranch.setCurrentPageLength(pageEntity.getCurrentPageLength());
		pageBranch.setPageSize(pageEntity.getPageSize());
		pageBranch.setStart(pageEntity.getStart());
		pageBranch.setTotalPages(pageEntity.getTotalPages());
		pageBranch.setTotalResults(pageEntity.getTotalResults());

	}

	private String getLiaisonStr(Set<BaseAlumniLiaison> liaisonSet) {
		StringBuilder liaisonStr = new StringBuilder();
		for (BaseAlumniLiaison liaison : liaisonSet) {
			liaisonStr.append(liaison.getAlumni().getName()).append("、");
		}
		return liaisonStr.toString().endsWith("、") ? liaisonStr.substring(0, liaisonStr.lastIndexOf("、")-1) : liaisonStr.toString();
	}

	private List<Order> buildOrder() {
		List<Order> orders = Lists.newArrayList();
		orders.add(Order.asc("name"));
		return orders;
	}

	@Override
	public void findMemberByBranch(PageEntity<BaseBranchRelation> pageMenber, Map<String, Param> params) {
		memberDao.pageByHql(pageMenber, params, new ArrayList<Order>());
	}

}