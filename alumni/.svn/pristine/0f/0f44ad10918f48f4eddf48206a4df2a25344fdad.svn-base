package com.wisdombud.alumni.manage.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.hibernate.criterion.Order;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.wisdombud.alumni.common.BaseSrvImpl;
import com.wisdombud.alumni.common.DicCommonSrv;
import com.wisdombud.alumni.enums.GenderEnum;
import com.wisdombud.alumni.enums.IdentityEnum;
import com.wisdombud.alumni.enums.PoliticalStatusEnum;
import com.wisdombud.alumni.enums.UserDesignationEnum;
import com.wisdombud.alumni.manage.BaseAlumniSrv;
import com.wisdombud.alumni.manage.BaseRegisterSrv;
import com.wisdombud.alumni.pojo.dic.DicCollege;
import com.wisdombud.alumni.pojo.dic.DicDegree;
import com.wisdombud.alumni.pojo.dic.DicIndustry;
import com.wisdombud.alumni.pojo.dic.DicSpecialty;
import com.wisdombud.alumni.pojo.manage.BaseAlumni;
import com.wisdombud.alumni.pojo.manage.BaseIdentityRelation;
import com.wisdombud.alumni.pojo.manage.BaseRegister;
import com.wisdombud.alumni.pojo.system.PublicUser;
import com.wisdombud.alumni.pojo.system.SecUser;
import com.wisdombud.alumni.system.PublicUserSrv;
import com.wisdombud.alumni.system.SecUserSrv;
import com.wisdombud.alumni.util.BeanUtils;
import com.wisdombud.alumni.vo.Param;

import common.toolkit.java.entity.PageEntity;
import common.toolkit.java.orm.hibernate.CommonDao;

/**
 * 校友注册表Srv. <br/>
 * 
 * @author Administrator
 * 
 */
@Service(value = "baseRegisterSrv")
public class BaseRegisterSrvImpl extends BaseSrvImpl<BaseRegister> implements BaseRegisterSrv {

	@Autowired
	private BaseAlumniSrv alumniSrv;
	@Autowired
	private PublicUserSrv userSrv;
	@Autowired
	private SecUserSrv secUserSrv;
	@Autowired
	public DicCommonSrv dicCommonSrv;

	public BaseRegisterSrvImpl() {
	}

	@Autowired
	public BaseRegisterSrvImpl(@Qualifier(value = "baseRegisterDao") CommonDao<BaseRegister, String> commonDao) {
		super(commonDao);
	}

	public BaseRegister find(String id) {
		BaseRegister entity = super.find(id);
		this.fillName(entity);
		return entity;
	}

	@Override
	public List<BaseAlumni> matchingAlumni(String name, String code, Integer enrollYear, Integer college) {
		Map<String, Param> map = new HashMap<>();
		map.put("name", Param.like(name));
		map.put("code", Param.like(code));
		map.put("enrollYear", Param.eq(enrollYear));
		map.put("college", Param.eq(college));
		List<BaseAlumni> list = alumniSrv.findBy(map, new ArrayList<>());
		alumniSrv.fillName(list);
		return list;
	}

	@Override
	public void page(PageEntity<BaseRegister> pageEntity, Map<String, Param> params, List<Order> orders) {
		super.page(pageEntity, params, orders);
		for (BaseRegister v : pageEntity.getResults()) {
			fillName(v);
		}
	}

	public void fillName(BaseRegister entity) {
		if (StringUtils.isNotBlank(entity.getAuditor())) {
			SecUser user = secUserSrv.find(entity.getAuditor());
			entity.setAuditor(user != null ? user.getName() : "");
		}
		if (entity.getCollege() != null) {
			entity.setCollegeName(dicCommonSrv.findById(DicCollege.class, entity.getCollege()).getCnName());
		}
		if (entity.getIdentity() != null) {
			entity.setIdentityName(IdentityEnum.valueByIndex(entity.getIdentity()).getName());
		}
		if (entity.getGender() != null) {
			entity.setGenderName(GenderEnum.valueByIndex(entity.getGender()).getName());
		}
		if (entity.getPoliticalStatus() != null) {
			entity.setPoliticalStatusName(PoliticalStatusEnum.valueByIndex(entity.getPoliticalStatus()).getName());
		}
		if (entity.getMajor() != null) {
			DicSpecialty dic = dicCommonSrv.findById(DicSpecialty.class, entity.getMajor());
			// this.addDegree2Specialty(dic);
			entity.setMagorName(dic.getCnName());
		}
		if (entity.getHighestEducation() != null) {
			entity.setHighestEducationName(
					dicCommonSrv.findById(DicDegree.class, entity.getHighestEducation()).getCnName());
		}
		if (entity.getIndustry() != null) {
			entity.setIndustryName(dicCommonSrv.findById(DicIndustry.class, entity.getIndustry()).getValue());
		}
	}

	@Override
	public void addOrUpdateAlumni(BaseRegister v) {
		// 存在已知校友，覆盖
		BaseAlumni alumi = new BaseAlumni();
		if (StringUtils.isNotBlank(v.getAlumnid())) {
			alumi = alumniSrv.find(v.getAlumnid());
			if (alumi != null) {
				BeanUtils.copyProperties(v, alumi, "createTime", "id");
			}
			return;
		}
		BeanUtils.copyProperties(v, alumi, "id");
		// 增加用户
		PublicUser user = userSrv.addUser(alumi.getId(), v.getLoginName(), v.getPassword(),
				UserDesignationEnum.ALUMNI.getValue());
		// 未找到已知校友-新增
		alumi.setId(user.getId());
		alumniSrv.save(alumi);
	}
}
