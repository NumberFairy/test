package com.wisdombud.alumni.dao.manage.impl;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.criterion.Order;
import org.springframework.stereotype.Repository;

import com.google.common.collect.Maps;
import com.wisdombud.alumni.dao.manage.BaseAlumniClubDao;
import com.wisdombud.alumni.enums.AlumniBranchTypeEnum;
import com.wisdombud.alumni.pojo.dic.DicBasePo;
import com.wisdombud.alumni.pojo.manage.BaseAlumniBranch;
import com.wisdombud.alumni.vo.Param;

import common.toolkit.java.entity.PageEntity;
import common.toolkit.java.orm.hibernate.SimpleHibernateDao;
import common.toolkit.java.util.StringUtil;

/**
 * 校友分会表 DaoImpl. <br/>
 *
 * @author Administrator
 *
 */
@Repository(value = "baseAlumniClubDao")
public class BaseAlumniClubDaoImpl extends SimpleHibernateDao<BaseAlumniBranch, String> implements BaseAlumniClubDao {
	private static final Logger LOGGER = Logger.getLogger(BaseAlumniClubDaoImpl.class);

	@Override
	public void pageByHql(PageEntity<DicBasePo> pageEntity, Map<String, Param> params, List<Order> orders, String type) {
		try {
			String tableName = AlumniBranchTypeEnum.valueByKey(Integer.valueOf(type)).getTable();
			StringBuffer hql = new StringBuffer(" FROM ").append(tableName).append(" where 1=1 ");
			buildParams(hql, params);
			bulidOrders(hql, orders);
			Map<String, Object> paramsMap = new HashMap<String, Object>();
			for (Entry<String, Param> entry : params.entrySet()) {
				if (entry.getKey().equals("type")) {
					paramsMap.put(entry.getKey(), Integer.valueOf(entry.getValue().getVal().toString()));
					continue;
				}
				paramsMap.put(entry.getKey(), entry.getValue().getVal());
			}
			pageByHql(hql.toString(), pageEntity, paramsMap);
		} catch (NullPointerException e) {
			LOGGER.error("校友分会字典表中没有该类型!");
		}
	}

	private void bulidOrders(StringBuffer hql, List<Order> orders) {
		if (CollectionUtils.isEmpty(orders)) {
			return;
		}
		hql.append(" ORDER BY ");
		for (int i = 0; i < orders.size(); i++) {
			if (i == orders.size() - 1) {
				hql.append(orders.get(i).toString());
				continue;
			}
			hql.append(orders.get(i).toString() + ",");

		}
	}

	private void buildParams(StringBuffer hql, Map<String, Param> params) {
		if (MapUtils.isEmpty(params)) {
			return;
		}
		for (Entry<String, Param> entry : params.entrySet()) {
			hql.append(" AND " + entry.getKey() + " " + entry.getValue().getOper() + " :" + entry.getKey());
		}
	}

	@Override
	public void deleteDicById(String branchId, String type) {
		if (StringUtils.isBlank(branchId) || StringUtils.isBlank(type)) {
			return;
		}
		String tableName = AlumniBranchTypeEnum.valueByKey(Integer.valueOf(type)).getTable();
		StringBuffer hql = new StringBuffer("DELETE ").append(tableName).append(" where 1=1 AND id = :branchId");
		Query query = getSession().createQuery(hql.toString());
		Map<String, String> params = Maps.newHashMap();
		params.put("branchId", branchId);
		fillParams(query, params);
		query.executeUpdate();
	}

	private void fillParams(final Query query, final Map<String, ?> params) {
        if (null == query || null == params) {
            return;
        }
        for (Map.Entry<String, ?> entry : params.entrySet()) {
            if (null == entry.getValue() || StringUtil.isEmpty(entry.getValue().toString().trim())) {
                continue;
            }
            if (entry.getValue() instanceof Collection<?>) {
                query.setParameterList(entry.getKey(), (Collection<?>) entry.getValue());
            } else if (entry.getValue() instanceof Object[]) {
                query.setParameterList(entry.getKey(), (Object[]) entry.getValue());
            } else {
                query.setParameter(entry.getKey(), entry.getValue());
            }
        }
    }
}
