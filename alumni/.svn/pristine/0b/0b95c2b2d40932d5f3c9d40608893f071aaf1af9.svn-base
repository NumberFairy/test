package com.wisdombud.alumni.actions.manage;

import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.ParentPackage;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;

import com.google.common.collect.Maps;
import com.wisdombud.alumni.actions.base.AbstractCrudAction;
import com.wisdombud.alumni.common.IBaseSrv;
import com.wisdombud.alumni.manage.BaseAlumniBranchStaffSrv;
import com.wisdombud.alumni.pojo.manage.BaseAlumniBranchStaff;
import com.wisdombud.alumni.vo.Param;

/**
 * 功能: 校友分会人员职务表<br/>
 * date: 2017-4-6 14:13:45 <br/>
 *
 * @author robot
 * @version
 * @since JDK 1.8
 */
@Scope("prototype")
@ParentPackage(value = "portal-default")
@Namespace(value = "/")
@Results({ @Result(name = "toAddOrUpdate", location = "/WEB-INF/jsp/library-tube/storehouse-management/create-storehouse-management.jsp"),
		   @Result(name = "toDetail", location = "/WEB-INF/jsp/library-tube/storehouse-management/storehouse-management-detail.jsp"),
		   @Result(name = "toPage", location = "/WEB-INF/jsp/longtime-borrow-return/list.jsp") })
public class AlumniBranchStaffAction extends AbstractCrudAction<BaseAlumniBranchStaff> {
	private static final long serialVersionUID = 1L;

	@Autowired
	private BaseAlumniBranchStaffSrv srv;

	private String branchId;
	private List<BaseAlumniBranchStaff> entityList;

	public AlumniBranchStaffAction(@Qualifier(value = "baseAlumniBranchStaffSrv") IBaseSrv<BaseAlumniBranchStaff> baseSrv) {
		super(baseSrv);
	}

	public void initList() {
		if (isAjaxRequest() && StringUtils.isNotBlank(id)) {
			entityList = srv.findLeaders(this.buildParams(), super.buildOrder());
			sendResponseMsg(entityList);
		}
	}

	@Override
	protected Map<String, Param> buildParams() {
		Map<String, Param> params = Maps.newHashMap();
		if (StringUtils.isNotBlank(id)) {
			params.put("branchId", Param.eq(branchId));
		}
		return params;
	}

	public String getBranchId() {
		return branchId;
	}

	public void setBranchId(String branchId) {
		this.branchId = branchId;
	}

	public List<BaseAlumniBranchStaff> getEntityList() {
		return entityList;
	}

	public void setEntityList(List<BaseAlumniBranchStaff> entityList) {
		this.entityList = entityList;
	}

}
