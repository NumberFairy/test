package com.wisdombud.alumni.actions.manage;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.ParentPackage;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.hibernate.criterion.Order;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;

import com.google.common.collect.Lists;
import com.opensymphony.xwork2.ActionContext;
import com.wisdombud.alumni.actions.base.AbstractCrudAction;
import com.wisdombud.alumni.common.IBaseSrv;
import com.wisdombud.alumni.enums.FlowAuditEnum;
import com.wisdombud.alumni.manage.BaseAlumniActivityApplySrv;
import com.wisdombud.alumni.pojo.manage.BaseAlumniActivityApply;
import com.wisdombud.alumni.threadlocal.UserSession;
import com.wisdombud.alumni.vo.Param;

/**
 * 功能: 校友活动申请表<br/>
 * date: 2017-3-28 19:28:27 <br/>
 * 
 * @author robot
 * @version
 * @since JDK 1.8
 */
@Scope("basealumniactivityapply")
@ParentPackage(value = "portal-default")
@Namespace(value = "/")
@Results({ @Result(name = "toAddOrUpdate", location = "/WEB-INF/jsp/library-tube/storehouse-management/create-storehouse-management.jsp"),
		   @Result(name = "toDetail", location = "/WEB-INF/jsp/flow-audit/activity-audit/detail.jsp"),
		   @Result(name = "toActivityAudit", location = "/WEB-INF/jsp/flow-audit/activity-audit/page.jsp"),
		   @Result(name = "toPage", location = "/WEB-INF/jsp/portal/alumni-login/launch-event/list.jsp") })
public class AlumniActivityApplyAction extends AbstractCrudAction<BaseAlumniActivityApply> {
	private static final long serialVersionUID = 1L;

	@Autowired
	private BaseAlumniActivityApplySrv		baseAlumniActivityApplySrv;
	
	private String							auditStatus;
	public AlumniActivityApplyAction(@Qualifier(value = "baseAlumniActivityApplySrv") IBaseSrv<BaseAlumniActivityApply> baseSrv) {
		super(baseSrv);
	}

	@Override
	protected List<Order> buildOrder() {
		return super.buildOrder();
	}

	@Override
	protected Map<String, Param> buildParams() {
		Map<String, Param> parms=new HashMap<String, Param>();
		parms.put("person", Param.eq(this.id));
		return parms;
	}

	@Override
	public void page(){
		if(StringUtils.isNotBlank(this.id)){
			this.buildParams();
			super.page();  
		}
	}
	
	public void activityAuditPage(){
		List<String> orderList=Lists.newArrayList();
		orderList.add("createTime");
		orderList.add("auditTime");
		List<BaseAlumniActivityApply> list = this.baseAlumniActivityApplySrv.findAllByDesc(orderList);
		this.sendResponseMsg(list);
	}
	
	public String doAudit(){
		final UserSession userSession = (UserSession) ActionContext.getContext().getSession().get("UserSession");
		if(StringUtils.isNotBlank(this.id)&&StringUtils.isNotBlank(this.auditStatus)&&userSession!=null){
			String uerName=userSession.getUserName();
			if(StringUtils.isNotBlank(uerName));
			this.baseAlumniActivityApplySrv.updateAudit(this.id,auditStatus,uerName);
		}
		return "toActivityAudit";
	}
	
	public String hrefActvityAudit(){
		return "toActivityAudit";
	}

	public String hrefActivityAuditDetail(){
		if(StringUtils.isNotBlank(this.id)){
			this.entity=this.baseSrv.find(this.id);
		}
		return "toDetail";
	}
	
	public String getAuditStatus() {
		return auditStatus;
	}

	public void setAuditStatus(String auditStatus) {
		this.auditStatus = auditStatus;
	}
	
	
}
