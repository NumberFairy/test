package com.wisdombud.alumni.system.impl;

import java.security.SecureRandom;
import java.util.Date;
import java.util.List;
import java.util.Random;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.collections.CollectionUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.wisdombud.alumni.common.BaseSrvImpl;
import com.wisdombud.alumni.manage.impl.BaseAlumniLiaisonSrvImpl;
import com.wisdombud.alumni.pojo.system.PublicUser;
import com.wisdombud.alumni.pojo.system.SecUser;
import com.wisdombud.alumni.system.PublicUserSrv;

import common.toolkit.java.orm.hibernate.CommonDao;
import common.toolkit.java.util.StringUtil;

@Service(value = "publicUserSrv")
public class PublicUserSrvImpl extends BaseSrvImpl<PublicUser> implements PublicUserSrv {
	private static final Logger LOGGER = Logger.getLogger(BaseAlumniLiaisonSrvImpl.class);

	public PublicUserSrvImpl() {
	}

	@Autowired
	public PublicUserSrvImpl(@Qualifier(value = "publicUserDao") CommonDao<PublicUser, String> commonDao) {
		super(commonDao);
	}

	@Override
	public void updateResetPwd(String ids) {
		String[] idList = ids.split(",");
		for (String id : idList) {
			PublicUser user = super.find(id);
			user.setPwdHash(StringUtil.encrypt(SecUser.DEFAULT_PASSWORD + user.getSalt()));
			user.setLastUpdate(new Date());
		}
	}

	@Override
	public PublicUser addUser(String id, String loginName, String pwd, int designation) {
		List<PublicUser> list = findBy("loginName", loginName);
		if (CollectionUtils.isNotEmpty(list)) {
			LOGGER.debug("用户已存在，新增失败" + loginName + " " + designation);
			return null;
		}
		String salt = generateSalt();
		PublicUser user = new PublicUser();
		user.setLoginName(loginName);
		user.setPwdHash(StringUtil.encrypt(pwd == "" ? SecUser.DEFAULT_PASSWORD+salt : pwd + salt));
		user.setDesignation(designation);
		user.setLastUpdate(new Date());
		user.setCreateTime(new Date());
		user.setSalt(salt);
		user.setId(id);
		save(user);
		return user;
	}

	private String generateSalt() {
		final Random r = new SecureRandom();
		byte[] salt = new byte[32];
		r.nextBytes(salt);
		return Base64.encodeBase64String(salt);
	}
}
