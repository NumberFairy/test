package com.wisdombud.alumni.manage.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.criterion.Order;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.wisdombud.alumni.common.BaseSrvImpl;
import com.wisdombud.alumni.common.DicCommonSrv;
import com.wisdombud.alumni.dao.manage.BaseAlumniClubDao;
import com.wisdombud.alumni.dao.manage.BaseAlumniLiaisonDao;
import com.wisdombud.alumni.dao.manage.BaseBranchRelationDao;
import com.wisdombud.alumni.enums.AlumniBranchIdentityEnum;
import com.wisdombud.alumni.enums.AlumniBranchTypeEnum;
import com.wisdombud.alumni.manage.BaseAlumniBranchStaffSrv;
import com.wisdombud.alumni.manage.BaseAlumniClubSrv;
import com.wisdombud.alumni.manage.BaseBranchRelationSrv;
import com.wisdombud.alumni.manage.DicChapterBranchSrv;
import com.wisdombud.alumni.manage.DicCollegeBranchSrv;
import com.wisdombud.alumni.manage.DicIndustryBranchSrv;
import com.wisdombud.alumni.manage.DicOverseaBranchSrv;
import com.wisdombud.alumni.pojo.base.DicAlumniBranchType;
import com.wisdombud.alumni.pojo.dic.DicChapterBranch;
import com.wisdombud.alumni.pojo.dic.DicCollegeBranch;
import com.wisdombud.alumni.pojo.dic.DicIndustryBranch;
import com.wisdombud.alumni.pojo.dic.DicOverseaBranch;
import com.wisdombud.alumni.pojo.manage.BaseAlumni;
import com.wisdombud.alumni.pojo.manage.BaseAlumniBranch;
import com.wisdombud.alumni.pojo.manage.BaseAlumniBranchStaff;
import com.wisdombud.alumni.pojo.manage.BaseAlumniLiaison;
import com.wisdombud.alumni.pojo.manage.BaseBranchRelation;
import com.wisdombud.alumni.util.BeanUtils;
import com.wisdombud.alumni.vo.AlumniBranchVo;
import com.wisdombud.alumni.vo.Param;
import common.toolkit.java.entity.PageEntity;
import common.toolkit.java.orm.hibernate.CommonDao;

	/**
     * 校友分会表Srv. <br/>
     * @author zxguan
     */
@Service(value= "baseAlumniClubSrv")
public class BaseAlumniClubSrvImpl extends BaseSrvImpl<BaseAlumniBranch> implements BaseAlumniClubSrv {

    private static final Logger LOGGER = Logger.getLogger(BaseAlumniClubSrvImpl.class);

	@Autowired
	private DicCommonSrv dicSrv;
	@Autowired
	private BaseBranchRelationSrv memberSrv;
	@Autowired
	private BaseAlumniBranchStaffSrv staffSrv;
	@Autowired
	private DicCollegeBranchSrv collegeSrv;
	@Autowired
	private DicChapterBranchSrv chapterSrv;
	@Autowired
	private DicOverseaBranchSrv overSeaSrv;
	@Autowired
	private DicIndustryBranchSrv industrySrv;
	@Autowired
	private BaseAlumniClubDao dao;
	@Autowired
	private BaseAlumniLiaisonDao liaisonDao;
	@Autowired
	private BaseBranchRelationDao memberDao;

    public BaseAlumniClubSrvImpl(){}

	@Autowired
	public BaseAlumniClubSrvImpl(@Qualifier(value = "baseAlumniClubDao") CommonDao<BaseAlumniBranch, String> commonDao) {
		super(commonDao);
	}

	@Override
	public String fillAlumniBranchTypeStr(String type) {
		String typeStr = null;
		if (StringUtils.isNotBlank(type)) {
			List<DicAlumniBranchType> lists = dicSrv.findAll(DicAlumniBranchType.class);
			for (DicAlumniBranchType item : lists) {
				if ((item.id).equals(type)) {
					typeStr = item.getValue();
					break;
				}
			}
		}
		return typeStr;
	}

	@Override
	public void page(PageEntity<AlumniBranchVo> pageBranchVo, Map<String, Param> params, List<Order> orders, String type) {
		Integer start = pageBranchVo.getStart();
		Integer limit = pageBranchVo.getPageSize();
		if (String.valueOf(AlumniBranchTypeEnum.CHAPTER.getKey()).equals(type)) {
			PageEntity<DicChapterBranch> pageEntity = new PageEntity<>(start, limit);
			dao.pageChapterByHql(pageEntity, params, orders, type);
			this.fillChapterBranchVo(pageBranchVo, pageEntity);

		} else if (String.valueOf(AlumniBranchTypeEnum.COLLEGE.getKey()).equals(type)) {
			PageEntity<DicCollegeBranch> pageEntity = new PageEntity<>(start, limit);
			dao.pageCollegeByHql(pageEntity, params, orders, type);
			this.fillCollegeBranchVo(pageBranchVo, pageEntity);

		} else if (String.valueOf(AlumniBranchTypeEnum.OVERSEA.getKey()).equals(type)) {
			PageEntity<DicOverseaBranch> pageEntity = new PageEntity<>(start, limit);
			dao.pageOverseaByHql(pageEntity, params, orders, type);
			this.fillOverseaBranchVo(pageBranchVo, pageEntity);

		} else if (String.valueOf(AlumniBranchTypeEnum.INDUSTRY.getKey()).equals(type)) {
			PageEntity<DicIndustryBranch> pageEntity = new PageEntity<>(start, limit);
			dao.pageIndustryByHql(pageEntity, params, orders, type);
			this.fillIndustryBranchVo(pageBranchVo, pageEntity);

		} else {
		}
	}

	private void fillIndustryBranchVo(PageEntity<AlumniBranchVo> pageVo, PageEntity<DicIndustryBranch> pageEntity) {
		List<DicIndustryBranch> dicList = pageEntity.getResults();
		List<AlumniBranchVo> voList = Lists.newArrayList();
		for (DicIndustryBranch dic : dicList) {
			AlumniBranchVo vo = new AlumniBranchVo();
			BaseAlumniBranch branch = this.find(dic.getInfoId());
			vo.setId(branch.getId());
			vo.setBranchId(dic.getId());
			this.fillBranchInfo(vo, branch);
			this.fillBranchStaff(vo, dic.getStaffList());
			this.fillBranchLiaison(vo, dic.getLiaisonList());
			this.fillBranchMember(vo, dic.getMemberList());
			voList.add(vo);
		}
		pageVo.setResults(voList);
		pageVo.setCurrentPage(pageEntity.getCurrentPage());
		pageVo.setCurrentPageLength(pageEntity.getCurrentPageLength());
		pageVo.setPageSize(pageEntity.getPageSize());
		pageVo.setStart(pageEntity.getStart());
		pageVo.setTotalPages(pageEntity.getTotalPages());
		pageVo.setTotalResults(pageEntity.getTotalResults());
	}

	private void fillOverseaBranchVo(PageEntity<AlumniBranchVo> pageVo, PageEntity<DicOverseaBranch> pageEntity) {
		List<DicOverseaBranch> dicList = pageEntity.getResults();
		List<AlumniBranchVo> voList = Lists.newArrayList();
		for (DicOverseaBranch dic : dicList) {
			AlumniBranchVo vo = new AlumniBranchVo();
			BaseAlumniBranch branch = this.find(dic.getInfoId());
			vo.setId(branch.getId());
			vo.setBranchId(dic.getId());
			this.fillBranchInfo(vo, branch);
			this.fillBranchStaff(vo, dic.getStaffList());
			this.fillBranchLiaison(vo, dic.getLiaisonList());
			this.fillBranchMember(vo, dic.getMemberList());
			voList.add(vo);
		}
		pageVo.setResults(voList);
		pageVo.setCurrentPage(pageEntity.getCurrentPage());
		pageVo.setCurrentPageLength(pageEntity.getCurrentPageLength());
		pageVo.setPageSize(pageEntity.getPageSize());
		pageVo.setStart(pageEntity.getStart());
		pageVo.setTotalPages(pageEntity.getTotalPages());
		pageVo.setTotalResults(pageEntity.getTotalResults());
	}

	private void fillCollegeBranchVo(PageEntity<AlumniBranchVo> pageVo, PageEntity<DicCollegeBranch> pageEntity) {
		List<DicCollegeBranch> dicList = pageEntity.getResults();
		List<AlumniBranchVo> voList = Lists.newArrayList();
		for (DicCollegeBranch dic : dicList) {
			AlumniBranchVo vo = new AlumniBranchVo();
			BaseAlumniBranch branch = this.find(dic.getInfoId());
			vo.setId(branch.getId());
			vo.setBranchId(dic.getId());
			this.fillBranchInfo(vo, branch);
			this.fillBranchStaff(vo, dic.getStaffList());
			this.fillBranchLiaison(vo, dic.getLiaisonList());
			this.fillBranchMember(vo, dic.getMemberList());
			voList.add(vo);
		}
		pageVo.setResults(voList);
		pageVo.setCurrentPage(pageEntity.getCurrentPage());
		pageVo.setCurrentPageLength(pageEntity.getCurrentPageLength());
		pageVo.setPageSize(pageEntity.getPageSize());
		pageVo.setStart(pageEntity.getStart());
		pageVo.setTotalPages(pageEntity.getTotalPages());
		pageVo.setTotalResults(pageEntity.getTotalResults());
	}

	private void fillChapterBranchVo(PageEntity<AlumniBranchVo> pageVo, PageEntity<DicChapterBranch> pageEntity) {
		List<DicChapterBranch> dicList = pageEntity.getResults();
		List<AlumniBranchVo> voList = Lists.newArrayList();
		for (DicChapterBranch dic : dicList) {
			AlumniBranchVo vo = new AlumniBranchVo();
			BaseAlumniBranch branch = this.find(dic.getInfoId());
			vo.setId(branch.getId());
			vo.setBranchId(dic.getId());
			this.fillBranchInfo(vo, branch);
			this.fillBranchStaff(vo, dic.getStaffList());
			this.fillBranchLiaison(vo, dic.getLiaisonList());
			this.fillBranchMember(vo, dic.getMemberList());
			voList.add(vo);
		}
		pageVo.setResults(voList);
		pageVo.setCurrentPage(pageEntity.getCurrentPage());
		pageVo.setCurrentPageLength(pageEntity.getCurrentPageLength());
		pageVo.setPageSize(pageEntity.getPageSize());
		pageVo.setStart(pageEntity.getStart());
		pageVo.setTotalPages(pageEntity.getTotalPages());
		pageVo.setTotalResults(pageEntity.getTotalResults());
	}

	private void fillBranchInfo(AlumniBranchVo vo, BaseAlumniBranch branch) {
		vo.setName(branch.getName());
		vo.setWechat(branch.getWechatId());
		vo.setEmail(branch.getEmail());
		vo.setAddress(branch.getAddress());
	}

	private void fillBranchStaff(AlumniBranchVo vo, List<BaseAlumniBranchStaff> staffList) {
		for (BaseAlumniBranchStaff staff : staffList) {
			if (String.valueOf(AlumniBranchIdentityEnum.HUIZHANG.getValue()).equals(staff.getStaff())) {
				vo.setHuizhang(staff.getName());
				break;
			}
		}
	}

	private void fillBranchLiaison(AlumniBranchVo vo, List<BaseAlumniLiaison> liaisonList) {
		StringBuilder liaisonStr = new StringBuilder();
		for (BaseAlumniLiaison liaison : liaisonList) {
			BaseAlumni alumni = liaison.getAlumni();
			liaisonStr.append(alumni.getName()).append("、");
		}
		if (liaisonStr.toString().endsWith("、")) {
			String str = liaisonStr.substring(0, liaisonStr.toString().lastIndexOf("、")-1);
			vo.setLiaison(str);
		}
	}

	private void fillBranchMember(AlumniBranchVo vo, List<BaseBranchRelation> memberList) {
		vo.setMemberNum(memberList.size());
	}

	@Override
	public void findMemberByBranch(PageEntity<BaseBranchRelation> pageMenber, Map<String, Param> params) {
		memberDao.pageByHql(pageMenber, params, new ArrayList<Order>());
	}

	@Override
	public void deleteDicById(String branchId, String type) {
		dao.deleteDicById(branchId, type);
	}

	@Override
	public void addOrUpdate(BaseAlumniBranch entity, List<BaseAlumniBranchStaff> list, String type, String branchId) {
		if (null != entity && StringUtils.isBlank(entity.id)) {
			branchId = this.saveDic(entity, type);
			entity.setCreateTime(new Date());
			this.save(entity);
		} else {
			entity.setLastUpdate(new Date());
			BaseAlumniBranch oldEntity = this.find(entity.id);
			BeanUtils.copyProperties(entity, oldEntity, "id", "createTime");
			this.update(oldEntity);
		}
		staffSrv.deleteBy("branchId", branchId);
		for (BaseAlumniBranchStaff inst : list) {
			inst.setBranchId(branchId);
			staffSrv.save(inst);
		}
 	}

	private String saveDic(BaseAlumniBranch entity, String type) {
		String branchId = null;
		if (type.equals(AlumniBranchTypeEnum.CHAPTER.getKey() + "")) {
			DicChapterBranch po = new DicChapterBranch();
			po.setValue(entity.getName());
			po.setInfoId(entity.getId());
			chapterSrv.save(po);
			branchId = po.getId();

		} else if (type.equals(AlumniBranchTypeEnum.COLLEGE.getKey())) {
			DicCollegeBranch po = new DicCollegeBranch();
			po.setValue(entity.getName());
			po.setInfoId(entity.getId());
			collegeSrv.save(po);
			branchId = po.getId();

		} else if (type.equals(AlumniBranchTypeEnum.OVERSEA.getKey())) {
			DicOverseaBranch po = new DicOverseaBranch();
			po.setValue(entity.getName());
			po.setInfoId(entity.getId());
			overSeaSrv.save(po);
			branchId = po.getId();

		} else if (type.equals(AlumniBranchTypeEnum.INDUSTRY.getKey())) {
			DicIndustryBranch po = new DicIndustryBranch();
			po.setValue(entity.getName());
			po.setInfoId(entity.getId());
			industrySrv.save(po);
			branchId = po.getId();

		} else {
		}
		return branchId;
	}

}