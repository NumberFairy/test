package com.wisdombud.alumni.manage.impl;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.validation.constraints.Null;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Maps;
import com.wisdombud.alumni.manage.AlumExcel;
import com.wisdombud.alumni.manage.BaseAlumniImportSrv;
import com.wisdombud.alumni.manage.BaseAlumniSrv;
import com.wisdombud.alumni.manage.ExcelXiaoYouService;
import com.wisdombud.alumni.manage.ImportExportSrv;
import com.wisdombud.alumni.pojo.manage.BaseAlumni;
import com.wisdombud.alumni.pojo.manage.BaseAlumniImport;
import com.wisdombud.alumni.util.ExcelImportUtil;

import jxl.write.WritableWorkbook;

@Service
public class ExcelXiaoYouServiceImpl implements ExcelXiaoYouService {
	@Autowired
	private BaseAlumniSrv baseAlumniSrv;

	@Autowired
	private BaseAlumniImportSrv baseAlumniImportSrv;

	@Autowired
	private ImportExportSrv importExportSrv;

	/**
	 * @param excelFile
	 *            从excel中读取数据，并存储到数据库临时表中
	 * @return
	 * @throws IOException
	 */
	@Override
	public int importExcel(File excelFile) throws IOException {
		List<List<Object>> datas = ExcelImportUtil.readExcel(excelFile);
		int count = 0;
		for (int i = 1; i < datas.size(); i++) {
			BaseAlumniImport entity = this.convert2Entity(datas.get(i));
			this.baseAlumniImportSrv.save(entity);
			count++;
		}
		return count;
	}

	/**
	 * 转换数据，根据excel的固定头转换。 </br>
	 * 学院 学历 入学年份 专业 班号 学号 姓名 性别 民族 政治面貌 毕业年份 工作省区 工作市区 工作单位 职务 职称 单位地址 单位邮编
	 * 家庭地址 家庭邮编 办公电话 手机号 电子邮箱 QQ号码 备注
	 * 
	 * @param d
	 * @return
	 */
	private BaseAlumniImport convert2Entity(List<Object> data) {
		int index = 0;
		BaseAlumniImport entity = new BaseAlumniImport();
		entity.setCollege(data.get(index++).toString());
		entity.setHighestEducation(data.get(index++).toString());
		entity.setEnrollYear(data.get(index++).toString());
		entity.setMajor(data.get(index++).toString());
		entity.setClassName(data.get(index++).toString());
		entity.setCode(data.get(index++).toString());
		entity.setName(data.get(index++).toString());
		entity.setGender(data.get(index++).toString());
		entity.setReVarchar0(data.get(index++).toString());
		entity.setPoliticalStatus(data.get(index++).toString());
		entity.setReVarchar1(data.get(index++).toString());
		entity.setReVarchar4(data.get(index++).toString());
		entity.setReVarchar5(data.get(index++).toString());
		entity.setCompany(data.get(index++).toString());
		entity.setPost(data.get(index++).toString());
		entity.setTitle(data.get(index++).toString());
		entity.setCompanyAddress(data.get(index++).toString());
		entity.setReVarchar2(data.get(index++).toString());
		entity.setAddress(data.get(index++).toString());
		entity.setReVarchar3(data.get(index++).toString());
		entity.setOfficePhone(data.get(index++).toString());
		entity.setPhone(data.get(index++).toString());
		entity.setEmail(data.get(index++).toString());
		entity.setQq(data.get(index++).toString());
		entity.setRemark1(data.get(index++).toString());

		return entity;

	}

	@Override
	public void export(String ids, String fields, WritableWorkbook wb) {
		String[] fildsList;
		if (StringUtils.isBlank(fields)) {
			fildsList = StringUtils.join(AlumExcel.allFilds().toArray(), ",").split(",");
		} else {
			fildsList = fields.split(",");
		}
	}

	/**
	 * @DES:导出excel
	 * @autor:xiefei<br/>
	 */
	public void export(String ids, String fields, HSSFWorkbook wb) {
		String[] fildsList;
		if (StringUtils.isBlank(fields)) {
			fildsList = StringUtils.join(AlumExcel.allFilds().toArray(), ",").split(",");
		} else {
			fildsList = fields.split(",");
		}
		HSSFSheet sheet = wb.createSheet();
		for (int i = 0; i < fildsList.length; i++) {
			sheet.setColumnWidth(i, 5000);
		}

		this.fillHeader(wb, sheet, fildsList);

		List<BaseAlumni> info = new ArrayList<>();

		if (StringUtils.isBlank(ids)) {
			info = baseAlumniSrv.findAll();
		} else {
			String[] idList = ids.split(",");
			for (String id : idList) {
				info.add(this.baseAlumniSrv.find(id));
			}
		}
		List<BaseAlumniImport> infoExport = this.importExportSrv.convert2Export(info);
		this.fillBody(infoExport, sheet, wb, fildsList);
	}

	/**
	 * @DES:创建表头
	 * @autor:xiefei<br/>
	 */
	private void fillHeader(HSSFWorkbook wb, HSSFSheet sheet, String[] fieldList) {
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		HSSFFont font = wb.createFont();
		font.setColor(HSSFColor.BLACK.index);
		font.setFontHeightInPoints((short) 18);
		style.setFont(font);
		HSSFRow row = sheet.createRow(0);
		int i = 0;
		Map<String, String> map = this.findMap();
		for (String id : fieldList) {
			HSSFCell cell = row.createCell(i++);
			String value = map.get(id);
			cell.setCellValue(value);

			cell.setCellStyle(style);
		}
	}

	private Map<String, String> findMap() {
		Map<String, String> map = Maps.newHashMap();
		map.put("code", "学号");
		map.put("name", "姓名");
		map.put("gender", "性别");
		map.put("birthDate", "出生年月");
		map.put("politicalStatus", "政治面貌");
		map.put("qq", "QQ");
		map.put("phone", "手机号");
		map.put("address", "永久通讯地址");
		map.put("email", "邮箱");
		map.put("college", "学院");
		map.put("highestEducation", "学历");
		map.put("enrollYear", "入学年份");
		map.put("major", "专业");

		return map;
	}

	/**
	 * @DES:创建表单
	 * @autor:xiefei<br/>
	 */
	private void fillBody(List<BaseAlumniImport> dataList, HSSFSheet sheet, HSSFWorkbook wb, String[] fieldArray) {
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		HSSFFont font = wb.createFont();
		font.setColor(HSSFColor.BLACK.index);
		font.setFontHeightInPoints((short) 16);
		style.setFont(font);
		int i = 1;
		for (BaseAlumniImport inst : dataList) {

			HSSFRow row = sheet.createRow(i++);
			row.setRowStyle(style);
			int j = 0;
			for (String field : fieldArray) {
				row.createCell(j++).setCellValue(setCell(field, inst));
			}
		}
	}

	public String toGetter(String fieldname) {

		if (fieldname == null || fieldname.length() == 0) {
			return null;
		}

		if (fieldname.length() > 2) {
			String second = fieldname.substring(1, 2);
			if (second.equals(second.toUpperCase())) {
				return new StringBuffer("get").append(fieldname).toString();
			}
		}

		fieldname = new StringBuffer("get").append(fieldname.substring(0, 1).toUpperCase())
				.append(fieldname.substring(1)).toString();

		return fieldname;
	}

	public Object invokeMethod(Object owner, String fieldname, Object[] args) throws SecurityException,
			NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		Class ownerClass = owner.getClass();

		Method method = null;
		method = ownerClass.getMethod(this.toGetter(fieldname));

		Object object = null;
		object = method.invoke(owner);

		return object;
	}

	private String setCell(String field, BaseAlumniImport data) {
		String val = "";

		Class clazz = data.getClass();
		Field[] fields = clazz.getDeclaredFields();
		for (int i = 0; i < fields.length; i++) {
			if (fields[i].getName().equals(field)) {
				try {
					Object resultObject = invokeMethod(data, fields[i].getName(), null);
					if (resultObject == null) {
						resultObject = "";
					}
					val = resultObject.toString();
					break;
				} catch (SecurityException | NoSuchMethodException | IllegalArgumentException | IllegalAccessException
						| InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}

		return val;
	}

	public Object getFieldValue(BaseAlumni now, String fieldName) {
		Set<Field> fields = new HashSet<Field>();
		Field[] tempFields = now.getClass().getDeclaredFields();
		for (Field field : tempFields) {
			field.setAccessible(true);
			fields.add(field);
		}
		for (Field field : fields) {
			if (field.getName().equals(fieldName)) {
				try {
					return field.get(now);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return null;
	}

	@Override
	public int saveReal() {
		List<BaseAlumniImport> importList = this.baseAlumniImportSrv.findAll();
		int count = 0;
		for (BaseAlumniImport inst : importList) {
			this.baseAlumniSrv.save(this.importExportSrv.convert(inst));
			this.baseAlumniImportSrv.deleteById(inst.getId());
			count++;
			System.out.println(count);
		}
		return count;
	}

}
